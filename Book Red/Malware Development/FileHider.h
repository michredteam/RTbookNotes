#include <iostream>
#include <windows.h>
#include <string>


using namespace std;
class FileHider{
    private:
        string targetFile;
        string adsName;
        string adsContent;
        string adsPath;
    public:
        FileHider(string targetFile, string adsName, string adsContent){
            this->targetFile = targetFile;
            this->adsName = adsName;
            this->adsContent = adsContent;
            adsPath = targetFile + ":" + adsName;
        }
        // Setters
        void setTargetFile(string targetFile){
            this->targetFile = targetFile;
        }
        void setADSName(string adsName){
            this->adsName = adsName;
        }
        void setADSContent(string adsContent){
            this->adsContent = adsContent;
        }
        void setADSPath(string adsPath){
            this->adsPath = adsPath;
        }
        // Getters
        string getTargetFile(){
            return this->targetFile;
        }
        string getADSName(){
            return this->adsName;
        }
        string getADSContent(){
            return this->adsContent;
        }
        string getADSPath(){
            return this->adsPath;
        }
        // Hide file converting a file content to an ADS.
        bool hideFile(string sourceFile, string destinationFile) {
            // Open the source file for reading.
            HANDLE hSourceFile = CreateFile(sourceFile.c_str(), GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
            if (hSourceFile == INVALID_HANDLE_VALUE){
                cout << "Error: " << GetLastError() << endl;
                return false;
            }
            // Read the source file content.
            const int bufferSize = 1024;
            char buffer[bufferSize];
            DWORD bytesRead;
            string adsContent = "";
            while (ReadFile(hSourceFile, buffer, bufferSize, &bytesRead, NULL) && bytesRead > 0){
                adsContent += buffer;
            }
            // Create ADS
            string adsPath = destinationFile + ":" + adsName;
            HANDLE hFile = CreateFile(adsPath.c_str(), GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
            if (hFile == INVALID_HANDLE_VALUE){
                cout << "Error: " << GetLastError() << endl;
                return false;
            }
            // Write data to the Alternate Data Stream.
            DWORD dwBytesWritten = 0;
            bool bErrorFlag = WriteFile(hFile, adsContent.c_str(), strlen(adsContent.c_str()), &dwBytesWritten, NULL);
            if (FALSE == bErrorFlag){
                cout << "Error: in writing file content to ADS" << GetLastError() << endl;
                return false;
            }
            // Remove the original file.
            CloseHandle(hFile);
            CloseHandle(hSourceFile);
            if (remove(targetFile.c_str()) != 0){
                cout << "Error: in removing original file" << GetLastError() << endl;
                return false;
            }
            std::cout << "Alternate Data Stream created successfully." << std::endl;
            return true;
        }
        // Unhide file converting the ADS to a file content.
        bool unHideFile(string sourceFile, string destinationFile) {
            HANDLE hFile = CreateFile(destinationFile.c_str(), GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
            if (hFile == INVALID_HANDLE_VALUE) {
                cout << "Error in creating target file: " << GetLastError() << endl;
                    return false;
            }
            // Open the ADS for reading.
            string adsPath = sourceFile + ":" + adsName;
            cout << adsPath << endl;
            HANDLE hADS = CreateFile(adsPath.c_str(), GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
            if (hADS == INVALID_HANDLE_VALUE) {
                cout << "Error in opening ADS: " << GetLastError() << endl;
                CloseHandle(hFile);
                return false;
            }
            // Read data from the ADS and write it to the target file.
            const int bufferSize = 1024;
            char buffer[bufferSize];
            DWORD bytesRead, bytesWritten;
            while (ReadFile(hADS, buffer, bufferSize, &bytesRead, NULL) && bytesRead > 0) {
                WriteFile(hFile, buffer, bytesRead, &bytesWritten, NULL);
            }
            // Close the handles.
            CloseHandle(hADS);
            CloseHandle(hFile);
            // Remove the ADS.
            if (remove(adsPath.c_str()) != 0) {
                cout << "Error in removing ADS: " << GetLastError() << endl;
                CloseHandle(hADS);
                CloseHandle(hFile);
                return false;
            }
            std::cout << "File content restored successfully." << std::endl;
            return true;
        }    
};