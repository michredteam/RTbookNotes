package main

import (
	"flag"
	"github.com/fatih/color"
	"log"
	"net"
	"strconv"
	"time"
)

var banner = `
██████╗░░█████╗░██████╗░████████╗░██████╗░█████╗░░█████╗░███╗░░██╗
██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗████╗░██║
██████╔╝██║░░██║██████╔╝░░░██║░░░╚█████╗░██║░░╚═╝███████║██╔██╗██║
██╔═══╝░██║░░██║██╔══██╗░░░██║░░░░╚═══██╗██║░░██╗██╔══██║██║╚████║
██║░░░░░╚█████╔╝██║░░██║░░░██║░░░██████╔╝╚█████╔╝██║░░██║██║░╚███║
╚═╝░░░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝░░╚══╝
3xploit666
Curso RTOD 
simple scan port 
`

type FlagOptions struct {
	Ip      string
	minPort int
	maxPort int
}

func options() *FlagOptions {

	Ip := flag.String("H", "", "Host scan ")
	minPort := flag.Int("min", 100, "insert port min value")
	maxPort := flag.Int("max", 65535, "insert port max value")
	flag.Parse()
	return &FlagOptions{Ip: *Ip, minPort: *minPort, maxPort: *maxPort}
}
func main() {
	color.Green(banner)
	menu := options()
	if menu.Ip == "" {
		log.Fatal("Error: Insert Host scan required")
	}
	activeThreads := 0
	doneChannel := make(chan bool)

	for port := menu.minPort; port <= menu.maxPort; port++ {
		go testTcpConnection(menu.Ip, port, doneChannel)
		activeThreads++
	}

	// Wait for all threads to finish
	for activeThreads > 0 {
		<-doneChannel
		activeThreads--
	}
}

func testTcpConnection(ip string, port int, doneChannel chan bool) {
	_, err := net.DialTimeout("tcp", ip+":"+strconv.Itoa(port),

		time.Second*10)
	if err == nil {
		log.Printf("Port %d: Open\n", port)
	}
	doneChannel <- true
}
