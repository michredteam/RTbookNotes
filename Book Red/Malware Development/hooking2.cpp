#include <windows.h>

// Buffer for saving original bytes
char originalBytes[5];

FARPROC hookedAddress;

// Function that returns ASCII art
std::string catFunc() {
    return R"(
    ??????????????????????????????
    ??????????????????????????????
    ??????????????????????????????
    ??????????????????????????????
    ?????????????????????????????
    ?????????????????????????????
    ?????????????????????????????
    ??????????????????????????????
    ??????????????????????????????
    ??????????????????????????????
    ??????????????????????????????
    ??????????????????????????????
    )";
}

// Function that shows a MessageBox with ASCII art
int __stdcall myFunc(LPCSTR say, UINT uCmdShow) {
    // Unhook the function: rewrite original bytes
    WriteProcessMemory(GetCurrentProcess(), (LPVOID)hookedAddress, originalBytes, 5, NULL);

    // Show MessageBox
    MessageBox(NULL, catFunc().c_str(), "=^..^=", MB_OK);

    // Return to the original function
    return 0;
}

// Hooking logic
void setMySuperHook() {
    HINSTANCE hLib;
    VOID *myFuncAddress;
    DWORD *rOffset;
    DWORD src;
    DWORD dst;
    CHAR patch[5] = {0};

    // Get memory address of function WinExec
    hLib = LoadLibraryA("kernel32.dll");
    hookedAddress = GetProcAddress(hLib, "WinExec");

    // Save the first 5 bytes into originalBytes (buffer)
    ReadProcessMemory(GetCurrentProcess(), (LPCVOID)hookedAddress, originalBytes, 5, NULL);

    // Overwrite the first 5 bytes with a jump to myFunc
    myFuncAddress = &myFunc;

    // Will jump from the next instruction (after our 5 byte jmp instruction)
    src = (DWORD)hookedAddress + 5;
    dst = (DWORD)myFuncAddress;
    rOffset = (DWORD *)(dst - src);

    // \xE9 - jump instruction
    memcpy(patch, "\xE9", 1);
    memcpy(patch + 1, &rOffset, 4);

    WriteProcessMemory(GetCurrentProcess(), (LPVOID)hookedAddress, patch, 5, NULL);
}

int main() {
    // Call original
    WinExec("notepad", SW_SHOWDEFAULT);

    // Install hook
    setMySuperHook();

    // Call after install hook
    WinExec("notepad", SW_SHOWDEFAULT);

    return 0;
}

